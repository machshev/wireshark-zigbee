[project]
name = "wireshark-zigbee"
version = "0.1.0"
description = "Wireshark Zigbee Extcap"
readme = "README.md"
licence = "Apache-2.0"
license-files = ["LICENSE"]
requires-python = ">=3.13"
dependencies = [
    "click>=8.1.7",
    "logzero>=1.7.0",
    "pyserial>=3.5",
    "pyserial-asyncio>=0.6",
    "scapy>=2.6.1",
]

[project.optional-dependencies]
typing = [
    "pyright>=1.1.381",
]
linting = [
    "ruff>=0.6.7",
]
debug = [
    "ipython>=8.18.1",
]
test = [
    "pyhamcrest>=2.1.0",
    "pytest>=8.3.3",
    "pytest-cov>=5.0.0",
]

dev = [
    "wireshark-zigbee[linting,typing,test,debug]"
]
ci = [
    "wireshark-zigbee[linting,typing,test]",
]
# Dependency set to be installed automatically in the direnv-activated nix devshell
# - Leave out ruff(linting) as it contains a rust binary that needs to be installed by the flake
nix = [
    "wireshark-zigbee[typing,test,debug]",
]

[project.scripts]
wireshark-zigbee = "wireshark_zigbee.cli:main"


[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.pyright]
include = ["src"]
reportMissingImports = "error"
reportMissingTypeStubs = false
venv = ".venv"
executionEnvironments = [
    { root = "src" },
]

[tool.ruff]
target-version = "py314"

[tool.ruff.lint]
preview = true
explicit-preview-rules = true
select = ["ALL"]
extend-select = ["W391", "E303"]
allowed-confusables = ["âˆ’"]
ignore = [
    "D203",   # Blank line after class def (we do not use this style)
    "D213",   # Multi-line summary second line (we do not use this style)
    "COM812", # Missing trailing comma (unnecessary with auto format)
    "FIX",    # FIX related rules
    "TD",     # TODO related rules
    "S603",   # Start process without shell
    "S607",   # Start process with partial path
    "TRY003", # Custom exception with vanilla args. This is reasonable if the
              # exception is used as a sentinel.
    "EM101",  # String literals in exception
    "T201",   # Use lots of print statements
]

[tool.ruff.lint.per-file-ignores]
"tests/**.py" = [
    # Checks for boolean passed as positional argument which is useful in the
    # main codebase for clarity. However it's common to assert against a boolean
    # in tests and having to use kwargs in all cases will clutter the tests.
    "FBT003",
]

[tool.pytest.ini_options]
addopts = "--cov=wireshark-zigbee --cov-report term-missing"
norecursedirs = ["*.egg", ".*", "_darcs", "build", "dist", "venv", "scratch", "doc"]

